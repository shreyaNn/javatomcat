pipeline {
    agent {
        label 'ansible-deploy'  // Using the correct node name
    }
    
    environment {
        NEXUS_URL = "http://nexus:8081"
        NEXUS_REPOSITORY = "maven-snapshots"
        ARTIFACT_GROUP = "com.mycompany.web"
        ARTIFACT_NAME = "app"
        BUILD_VERSION = "2.0-SNAPSHOT"
        EC2_PROD_SERVER = "52.66.248.205"
        TEST_CONTAINER_NAME = "devopsproject-tomcat-1"  // Using the existing Tomcat container
    }
    
    stages {
        stage('Pull from Nexus') {
            steps {
                sh """
                    wget ${NEXUS_URL}/repository/${NEXUS_REPOSITORY}/${ARTIFACT_GROUP.replace('.', '/')}/${ARTIFACT_NAME}/${BUILD_VERSION}/${ARTIFACT_NAME}-${BUILD_VERSION}.war -O build1.war
                """
            }
        }
        
        stage('Deploy to Test Environment') {
            steps {
                sh """
                    docker cp build1.war ${TEST_CONTAINER_NAME}:/usr/local/tomcat/webapps/
                    docker exec ${TEST_CONTAINER_NAME} catalina.sh stop
                    docker exec ${TEST_CONTAINER_NAME} catalina.sh start
                """
            }
        }
        
        stage('Run Selenium Tests') {
            steps {
                sh '''
                    # Wait for Tomcat to start up
                    sleep 30
                    # Run your Selenium tests
                    mvn test -Dtest=SeleniumTest \
                    -Dwebdriver.remote.url=http://selenium-hub:4444/wd/hub \
                    -Dapp.url=http://${TEST_CONTAINER_NAME}:8080/build1 \
                    -Dtest.browser=chrome
                '''
            }
        }
        
        stage('Deploy to Production') {
            steps {
                ansiblePlaybook(
                    playbook: 'playbooks/deploy_app.yml',
                    inventory: 'inventory/inventory.ini',
                    extras: "-e \"prod_server=${EC2_PROD_SERVER} build_version=${BUILD_VERSION}\""
                )
            }
        }
    }
    
    post {
        always {
            sh 'docker exec ${TEST_CONTAINER_NAME} catalina.sh stop || true'
        }
    }
}

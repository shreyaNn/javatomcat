pipeline {
    agent {
        label 'ansible-deploy'
    }
    
    environment {
        NEXUS_URL = "http://localhost:8081"
        NEXUS_REPOSITORY = "maven-snapshots"
        ARTIFACT_GROUP = "com.example"
        ARTIFACT_NAME = "login-web-app"
        EC2_PROD_SERVER = "ec2-65-1-147-19.ap-south-1.compute.amazonaws.com"
        TEST_CONTAINER_NAME = "tomcat"
        WAR_PATH = "/usr/local/tomcat/webapps/login.war"
        APP_CONTEXT_PATH = "login"
        TOMCAT_PORT = "8888"
    }
    
    parameters {
        string(name: 'BUILD_VERSION', defaultValue: '1.0-SNAPSHOT', description: 'Version to build')
        choice(name: 'DEPLOY_ENV', choices: ['test', 'production'], description: 'Environment to deploy to')
    }
    
    stages {
        stage('Prepare') {
            steps {
                script {
                    if (params.BUILD_VERSION == '1.0-SNAPSHOT') {
                        env.BUILD_VERSION = sh(script: 'git describe --tags --always', returnStdout: true).trim()
                    } else {
                        env.BUILD_VERSION = params.BUILD_VERSION
                    }
                    echo "Building version: ${env.BUILD_VERSION}"
                }
            }
        }

        stage('Pull from Nexus') {
            steps {
                script {
                    try {
                        sh 'command -v jq || sudo apt-get update && sudo apt-get install -y jq' // Install jq if not present
                        
                        def latestVersion = sh(script: """
                            curl -s "${NEXUS_URL}/service/rest/v1/search/assets?repository=${NEXUS_REPOSITORY}&group=${ARTIFACT_GROUP}&name=${ARTIFACT_NAME}&version=${env.BUILD_VERSION}" | jq -r '.items[0].version'
                        """, returnStdout: true).trim()
                        
                        echo "Latest version found: ${latestVersion}"
                        
                        sh """
                            wget ${NEXUS_URL}/repository/${NEXUS_REPOSITORY}/${ARTIFACT_GROUP.replace('.', '/')}/${ARTIFACT_NAME}/${env.BUILD_VERSION}/${ARTIFACT_NAME}-${latestVersion}.war -O login.war
                        """
                        
                        echo "Successfully downloaded WAR file"
                    } catch (Exception e) {
                        error "Failed to download WAR file: ${e.getMessage()}"
                    }
                }
            }
        }
        
        stage('Deploy to Test Environment') {
            when {
                expression { params.DEPLOY_ENV == 'test' }
            }
            steps {
                script {
                    def containerRunning = sh(script: "docker ps -q -f name=${TEST_CONTAINER_NAME}", returnStatus: true) == 0
                    if (!containerRunning) {
                        sh "docker run -d --name ${TEST_CONTAINER_NAME} -p ${TOMCAT_PORT}:8080 tomcat:10-jdk17"
                        echo "Started new ${TEST_CONTAINER_NAME} container"
                    } else {
                        echo "Tomcat container ${TEST_CONTAINER_NAME} is already running"
                    }

                    sh "docker cp login.war ${TEST_CONTAINER_NAME}:${WAR_PATH}"
                    sh "docker exec ${TEST_CONTAINER_NAME} chown tomcat:tomcat ${WAR_PATH}"
                    
                    echo "Deployed WAR to test environment"
                }
            }
        }
        
        stage('Run Selenium Tests') {
            when {
                expression { params.DEPLOY_ENV == 'test' }
            }
            steps {
                script {
                    try {
                        sh '''
                            echo "Running Selenium tests..."
                            mvn test -e -X -P selenium-tests \
                            -Dwebdriver.remote.url=http://selenium-hub1:4444/wd/hub \
                            -Dapp.url=http://localhost:${TOMCAT_PORT}/${APP_CONTEXT_PATH} \
                            -Dtest.browser=chrome
                        '''
                        echo "Selenium tests completed successfully"
                    } catch (Exception e) {
                        echo "Selenium tests failed: ${e.getMessage()}"
                        error "Selenium test execution failed"
                    }
                }
            }
        }
        
        stage('Deploy to Production') {
            when {
                expression { params.DEPLOY_ENV == 'production' && currentBuild.resultIsBetterOrEqualTo('SUCCESS') }
            }
            steps {
                input message: 'Deploy to production?', ok: 'Deploy'
                sshagent(['aws-login-mumbai-key']) {
                    sh """
                        scp login.war ec2-user@${EC2_PROD_SERVER}:${WAR_PATH}
                        ssh ec2-user@${EC2_PROD_SERVER} 'sudo systemctl restart tomcat'
                    """
                }
            }
        }
    }
    
    post {
        always {
            archiveArtifacts artifacts: '**/login.war', allowEmptyArchive: true
            echo "Archived the WAR file for reference"
        }
        success {
            echo "Pipeline succeeded. Sending success email."
            emailext(
                to: 'shre3039@gmail.com',
                subject: "Jenkins Pipeline Success: ${env.JOB_NAME} [${env.BUILD_NUMBER}]",
                body: "The Jenkins pipeline ${env.JOB_NAME} build number ${env.BUILD_NUMBER} has succeeded.",
                attachLog: true
            )
        }
        failure {
            echo "Pipeline failed. Sending failure email."
            emailext(
                to: 'shre3039@gmail.com',
                subject: "Jenkins Pipeline Failure: ${env.JOB_NAME} [${env.BUILD_NUMBER}]",
                body: "The Jenkins pipeline ${env.JOB_NAME} build number ${env.BUILD_NUMBER} has failed. Please check the Jenkins logs for more details.",
                attachLog: true
            )
        }
    }
}

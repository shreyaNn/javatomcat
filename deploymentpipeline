pipeline {
    agent { label 'jenkins-agent' }
    environment {
        NEXUS_URL = 'http://localhost:8081/repository/maven-snapshots/'
        NEXUS_CREDENTIALS_ID = 'nexus-credentials'
        JAR_NAME = 'app'
        BUILD_VERSION = "${env.BUILD_NUMBER}"
        TEST_CONTAINER = 'test-container'
        PROD_SERVER = 'your-ec2-server'
        PROD_USER = 'ubuntu'
        PROD_PATH = "/opt/myjarfile/build${BUILD_VERSION}.jar"
        TEST_PATH = "/opt/myjarfile/build${BUILD_VERSION}.jar"
    }
    stages {
        stage('Pull JAR from Nexus') {
            steps {
                script {
                    try {
                        withCredentials([usernamePassword(credentialsId: NEXUS_CREDENTIALS_ID, usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASS')]) {
                            sh """
                                curl -u ${NEXUS_USER}:${NEXUS_PASS} -O "${NEXUS_URL}/${JAR_NAME}/2.0-SNAPSHOT/app-2.0-${BUILD_VERSION}.jar"
                                mv app-2.0-${BUILD_VERSION}.jar build${BUILD_VERSION}.jar
                            """
                        }
                    } catch (Exception e) {
                        echo "Failed to pull JAR file from Nexus. Error: ${e.getMessage()}"
                        error "Failed to pull JAR file from Nexus"
                    }
                }
            }
        }
        stage('Deploy to Test') {
            agent { label 'ansible-deploy' }
            steps {
                script {
                    try {
                        sh """
                            docker start ${TEST_CONTAINER} || docker run -d --name ${TEST_CONTAINER} ubuntu
                            docker cp build${BUILD_VERSION}.jar ${TEST_CONTAINER}:${TEST_PATH}
                        """
                    } catch (Exception e) {
                        echo "Failed to deploy JAR file to test container. Error: ${e.getMessage()}"
                        error "Failed to deploy JAR file to test container"
                    }
                }
            }
        }
        stage('Run Tests') {
            agent { label 'ansible-deploy' }
            steps {
                script {
                    try {
                        // Add your Selenium test command here
                        sh 'echo "Running Selenium tests..."'
                        // Example: sh 'docker exec ${TEST_CONTAINER} java -jar /path/to/selenium-tests.jar'
                    } catch (Exception e) {
                        echo "Testing failed. Error: ${e.getMessage()}"
                        error "Testing failed"
                    }
                }
            }
        }
        stage('Deploy to Production') {
            agent { label 'ansible-deploy' }
            steps {
                script {
                    try {
                        //Copy the JAR file to the Ansible node if needed
                        sh "cp build${BUILD_VERSION}.jar /path/to/ansible-java-app-setup/"
                        // Run Ansible playbook
                        dir("/path/to/ansible-java-app-setup") {
                            sh """
                                ansible-playbook playbooks/deploy_app.yml \
                                --extra-vars "jar_path=build${BUILD_VERSION}.jar prod_server=${PROD_SERVER} prod_path=${PROD_PATH} prod_user=${PROD_USER}"
                            """
                }
                    } catch (Exception e) {
                        echo "Failed to deploy JAR file to production using Ansible. Error: ${e.getMessage()}"
                        error "Failed to deploy JAR file to production using Ansible"
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                sh """
                    docker stop ${TEST_CONTAINER} || true
                """
            }
        }
    }
}

pipeline {
    agent {
        label 'ansible-deploy'
    }
    
    environment {
        NEXUS_URL = "http://localhost:8081"
        NEXUS_REPOSITORY = "maven-snapshots"
        ARTIFACT_GROUP = "com.example"
        ARTIFACT_NAME = "login-web-app"
        EC2_PROD_SERVER = "ec2-65-1-147-19.ap-south-1.compute.amazonaws.com"
        TEST_CONTAINER_NAME = "tomcat"
        WAR_PATH = "/usr/local/tomcat/webapps/login.war"
        APP_CONTEXT_PATH = "login"
        TOMCAT_PORT = "8888"
    }
    
    parameters {
        string(name: 'BUILD_VERSION', defaultValue: '1.0-SNAPSHOT', description: 'Version to build')
        choice(name: 'DEPLOY_ENV', choices: ['test', 'production'], description: 'Environment to deploy to')
        booleanParam(name: 'RUN_TESTS', defaultValue: true, description: 'Run Selenium tests')
    }
    
    stages {
        stage('Prepare') {
            steps {
                script {
                    echo "Building version: ${params.BUILD_VERSION}"
                    echo "Deploying to environment: ${params.DEPLOY_ENV}"
                    echo "Run tests: ${params.RUN_TESTS}"
                    echo "ARTIFACT_GROUP: ${ARTIFACT_GROUP}"
                    echo "ARTIFACT_NAME: ${ARTIFACT_NAME}"
                    echo "BUILD_VERSION: ${params.BUILD_VERSION}"
                }
            }
        }

        stage('Pull from Nexus') {
            steps {
                script {
                    try {
                        // List contents of the Nexus repository
                        sh """
                            echo "Listing Nexus repository contents:"
                            curl -s "${NEXUS_URL}/repository/${NEXUS_REPOSITORY}/${ARTIFACT_GROUP.replace('.', '/')}/${ARTIFACT_NAME}/${params.BUILD_VERSION}/"
                        """

                        def mavenMetadata = sh(script: """
                            curl -s "${NEXUS_URL}/repository/${NEXUS_REPOSITORY}/${ARTIFACT_GROUP.replace('.', '/')}/${ARTIFACT_NAME}/${params.BUILD_VERSION}/maven-metadata.xml"
                        """, returnStdout: true).trim()
                        
                        def timestamp = sh(script: "echo '${mavenMetadata}' | grep '<timestamp>' | sed 's/.*<timestamp>\\(.*\\)<\\/timestamp>.*/\\1/'", returnStdout: true).trim()
                        def buildNumber = sh(script: "echo '${mavenMetadata}' | grep '<buildNumber>' | sed 's/.*<buildNumber>\\(.*\\)<\\/buildNumber>.*/\\1/'", returnStdout: true).trim()
                        
                        def latestSnapshot = "${timestamp}-${buildNumber}"
                        
                        echo "Latest snapshot version: ${latestSnapshot}"
                        
                        if (latestSnapshot.isEmpty()) {
                            error "No snapshot version found in Nexus for ${ARTIFACT_NAME} version ${params.BUILD_VERSION}"
                        }
                        
                        def warFileName = "${ARTIFACT_NAME}-${params.BUILD_VERSION.replace('-SNAPSHOT', '')}-${latestSnapshot}.war"
                        
                        sh """
                            wget ${NEXUS_URL}/repository/${NEXUS_REPOSITORY}/${ARTIFACT_GROUP.replace('.', '/')}/${ARTIFACT_NAME}/${params.BUILD_VERSION}/${warFileName} -O ${warFileName}
                        """
                        
                        echo "Successfully downloaded WAR file: ${warFileName}"
                        env.DOWNLOADED_WAR_FILE = warFileName
                    } catch (Exception e) {
                        error "Failed to download WAR file: ${e.getMessage()}"
                    }
                }
            }
        }
        
        stage('Deploy to Test Environment') {
            when {
                expression { params.DEPLOY_ENV == 'test' }
            }
            steps {
                script {
                    try {
                        def containerRunning = sh(script: "docker ps -q -f name=${TEST_CONTAINER_NAME}", returnStatus: true) == 0
                        if (containerRunning) {
                            echo "Tomcat container ${TEST_CONTAINER_NAME} is running"
                            
                            sh "docker cp ${env.DOWNLOADED_WAR_FILE} ${TEST_CONTAINER_NAME}:/usr/local/tomcat/webapps/login.war"
                            
                            def tomcatUser = sh(script: "docker exec ${TEST_CONTAINER_NAME} ps -o user= -p 1", returnStdout: true).trim()
                            
                            sh "docker exec ${TEST_CONTAINER_NAME} chown ${tomcatUser}:${tomcatUser} /usr/local/tomcat/webapps/login.war"
                            
                            echo "Deployed new WAR to test environment as login.war"
                        } else {
                            error "Tomcat container ${TEST_CONTAINER_NAME} is not running. Please start the container manually."
                        }
                    } catch (Exception e) {
                        error "Failed to deploy to test environment: ${e.getMessage()}"
                    }
                }
            }
        }
        
        stage('Run Selenium Tests') {
            when {
                expression { params.DEPLOY_ENV == 'test' && params.RUN_TESTS }
            }
            steps {
                script {
                    try {
                        sh '''
                            echo "Running Selenium tests..."
                            mvn test -e -X -P selenium-tests \
                            -Dwebdriver.remote.url=http://selenium-hub1:4444/wd/hub \
                            -Dapp.url=http://localhost:${TOMCAT_PORT}/${APP_CONTEXT_PATH} \
                            -Dtest.browser=chrome
                        '''
                        echo "Selenium tests completed successfully"
                    } catch (Exception e) {
                        error "Selenium test execution failed: ${e.getMessage()}"
                    }
                }
            }
        }
        
        stage('Approve Production Deployment') {
            when {
                expression { params.DEPLOY_ENV == 'production' }
            }
            steps {
                script {
                    def userInput = input(id: 'Confirm', message: 'Deploy to Production?', parameters: [
                        [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Deploy to production', name: 'confirm']
                    ])
                    if (!userInput) {
                        error "Production deployment aborted by user"
                    }
                }
            }
        }
        
        stage('Deploy to Production') {
            when {
                expression { params.DEPLOY_ENV == 'production' }
            }
            steps {
                script {
                    try {
                        sshagent(['aws-login-mumbai-key']) {
                            sh """
                                scp ${env.DOWNLOADED_WAR_FILE} ec2-user@${EC2_PROD_SERVER}:${WAR_PATH}
                                ssh ec2-user@${EC2_PROD_SERVER} 'sudo systemctl restart tomcat'
                            """
                        }
                        echo "Successfully deployed to production"
                    } catch (Exception e) {
                        error "Failed to deploy to production: ${e.getMessage()}"
                    }
                }
            }
        }
    }
    
    post {
        always {
            archiveArtifacts artifacts: '**/login.war', allowEmptyArchive: true
            echo "Archived the WAR file for reference"
        }
        success {
            echo "Pipeline succeeded. Sending success email."
            emailext(
                to: 'shre3039@gmail.com',
                subject: "Jenkins Pipeline Success: ${env.JOB_NAME} [${env.BUILD_NUMBER}]",
                body: "The Jenkins pipeline ${env.JOB_NAME} build number ${env.BUILD_NUMBER} has succeeded. Deployed to ${params.DEPLOY_ENV}.",
                attachLog: true
            )
        }
        failure {
            echo "Pipeline failed. Sending failure email."
            emailext(
                to: 'shre3039@gmail.com',
                subject: "Jenkins Pipeline Failure: ${env.JOB_NAME} [${env.BUILD_NUMBER}]",
                body: "The Jenkins pipeline ${env.JOB_NAME} build number ${env.BUILD_NUMBER} has failed. Environment: ${params.DEPLOY_ENV}. Please check the Jenkins logs for more details.",
                attachLog: true
            )
        }
    }
}

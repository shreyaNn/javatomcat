pipeline {
    agent { label 'jenkins-agent' }
    environment {
        scannerHome = tool 'sonar-scanner'
        SONARQUBE_URL = 'http://localhost:9000'
        NEXUS_URL = 'http://localhost:8081/repository/maven-snapshots/'
        NEXUS_CREDENTIALS_ID = 'nexus-credentials'
        JENKINS_SONAR = credentials('sonartoken')
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Build') {
            steps {
                script {
                    dir('login-web-app') {
                        sh 'mvn clean package -DskipTests -B --settings /root/.m2/settings.xml'
                    }
                }
            }
        }
        stage('SonarQube Analysis') {
            steps {
                script {
                    dir('login-web-app') {
                        withSonarQubeEnv('SonarQube') {
                            sh """
                                ${scannerHome}/bin/sonar-scanner \
                                -Dsonar.projectKey=login-web-app \
                                -Dsonar.host.url=${SONARQUBE_URL} \
                                -Dsonar.token=${JENKINS_SONAR} \
                                -Dsonar.java.binaries=target/classes
                            """
                        }
                    }
                }
            }
        }
        stage('Unit Tests') {
            steps {
                script {
                    dir('login-web-app') {
                        sh 'mvn test -B --settings /root/.m2/settings.xml'
                        junit '**/target/surefire-reports/TEST-*.xml'
                    }
                }
            }
        }
        stage('Push to Nexus') {
            steps {
                script {
                    dir('login-web-app') {
                        def pom = readMavenPom file: 'pom.xml'
                        def artifactId = pom.artifactId
                        def version = pom.version
                        def packaging = pom.packaging
                        def filePath = "target/${artifactId}-${version}.${packaging}"
                        nexusArtifactUploader(
                            nexusVersion: 'nexus3',
                            protocol: 'http',
                            nexusUrl: 'localhost:8081',
                            groupId: pom.groupId,
                            version: version,
                            repository: 'maven-snapshots',
                            credentialsId: env.NEXUS_CREDENTIALS_ID,
                            artifacts: [
                                [artifactId: artifactId, classifier: '', file: filePath, type: packaging]
                            ]
                        )
                    }
                }
            }
        }
    }
    post {
        always {
            echo 'Pipeline finished.'
        }
        success {
            echo 'Pipeline executed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}

pipeline {
  agent { label 'jenkins-agent' }
    environment {
        // Configure the SonarQube Scanner tool
        scannerHome = tool 'sonar-scanner'
        // Define environment variables for SonarQube and Nexus
        SONARQUBE_URL = 'http://sonarqube:9000'
        NEXUS_URL = 'http://nexus:8081/repository/maven-releases/'
        NEXUS_CREDENTIALS_ID = 'nexus-credentials' // Replace with your Nexus credentials ID
        JENKINS_SONAR = credentials('sonartoken') // Add this credential in Jenkins
    }
    stages {
        stage('Checkout') {
            steps {
                script {
                    try {
                        git branch: 'main', url: 'https://github.com/shreyaNn/javatomcat.git'
                    } catch (Exception e) {
                        echo "Failed to checkout. Error: ${e.getMessage()}"
                        error "Repository checkout failed"
                    }
                }
            }
        }
        stage('Build') {
            steps {
                script {
                    try {
                        sh 'mvn clean package'
                    } catch (Exception e) {
                        echo "Build failed. Error: ${e.getMessage()}"
                        error "Build failed"
                    }
                }
            }
        }
        stage('SonarQube Analysis') {
            steps {
                script {
                    try {
                        withSonarQubeEnv('SonarQube') {
                            sh """
                                ${scannerHome}/bin/sonar-scanner \
                                -Dsonar.projectKey=javatomcat \
                                -Dsonar.sources=. \
                                -Dsonar.host.url=${SONARQUBE_URL} \
                                -Dsonar.login=${JENKINS_SONAR}
                            """
                        }
                    } catch (Exception e) {
                        echo "SonarQube Analysis failed. Error: ${e.getMessage()}"
                        error "SonarQube Analysis failed"
                    }
                }
            }
        }
        stage('Push to Nexus') {
            steps {
                script {
                    try {
                        def pom = readMavenPom file: 'pom.xml'
                        def artifactId = pom.artifactId
                        def version = pom.version
                        def packaging = pom.packaging
                        def filePath = "target/${artifactId}-${version}.${packaging}"
                        nexusArtifactUploader(
                            nexusVersion: 'nexus3',
                            protocol: 'http',
                            nexusUrl: 'nexus:8081',
                            groupId: pom.groupId,
                            version: version,
                            repository: 'maven-releases',
                            credentialsId: env.NEXUS_CREDENTIALS_ID,
                            artifacts: [
                                [artifactId: artifactId, classifier: '', file: filePath, type: packaging]
                            ]
                        )
                    } catch (Exception e) {
                        echo "Push to Nexus failed. Error: ${e.getMessage()}"
                        error "Push to Nexus failed"
                    }
                }
            }
        }
    }
}
